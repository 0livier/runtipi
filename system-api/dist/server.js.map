{
  "version": 3,
  "sources": ["../src/server.ts", "../src/routes/system.routes.ts", "../src/controllers/system.controller.ts"],
  "sourcesContent": ["import express from \"express\";\nimport { systemRoutes } from \"./routes\";\n\nconst app = express();\nconst port = 3001;\n\napp.use(\"/system\", systemRoutes);\n\napp.listen(port, () => {\n  console.log(`System API listening on port ${port}`);\n});\n", "import { Router } from \"express\";\nimport { SystemController } from \"../controllers\";\n\nconst router = Router();\n\nrouter.route(\"/cpu\").get(SystemController.getCpuInfo);\nrouter.route(\"/disk\").get(SystemController.getDiskInfo);\nrouter.route(\"/memory\").get(SystemController.getMemoryInfo);\n\nexport default router;\n", "import { Request, Response } from \"express\";\nimport si from \"systeminformation\";\n\ntype CpuData = {\n  load: number;\n};\n\ntype DiskData = {\n  size: number;\n  used: number;\n  available: number;\n};\n\ntype MemoryData = {\n  total: number;\n  free: number;\n  used: number;\n};\n\n/**\n *\n * @param req\n * @param res\n */\nconst getCpuInfo = async (req: Request, res: Response<CpuData>) => {\n  //   const cpuInfo = await cpu.getCpuInfo();\n  const cpuLoad = await si.currentLoad();\n\n  res.status(200).send({ load: cpuLoad.currentLoad });\n};\n\n/**\n *\n * @param req\n * @param res\n */\nconst getDiskInfo = async (req: Request, res: Response<DiskData>) => {\n  const disk = await si.fsSize();\n\n  const rootDisk = disk.find((item) => item.mount === \"/\");\n\n  if (!rootDisk) {\n    throw new Error(\"Could not find root disk\");\n  }\n\n  const result: DiskData = {\n    size: rootDisk.size,\n    used: rootDisk.used,\n    available: rootDisk.available,\n  };\n\n  res.status(200).send(result);\n};\n\n/**\n *\n * @param req\n * @param res\n */\nconst getMemoryInfo = async (req: Request, res: Response<MemoryData>) => {\n  const memory = await si.mem();\n\n  const result: MemoryData = {\n    total: memory.total,\n    free: memory.free,\n    used: memory.used,\n  };\n\n  res.status(200).json(result);\n};\n\nexport default { getCpuInfo, getDiskInfo, getMemoryInfo };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;;;ACCA;AAuBA,IAAM,aAAa,CAAO,KAAc,QAA2B;AAEjE,QAAM,UAAU,MAAM,GAAG,YAAY;AAErC,MAAI,OAAO,GAAG,EAAE,KAAK,EAAE,MAAM,QAAQ,YAAY,CAAC;AACpD;AAOA,IAAM,cAAc,CAAO,KAAc,QAA4B;AACnE,QAAM,OAAO,MAAM,GAAG,OAAO;AAE7B,QAAM,WAAW,KAAK,KAAK,CAAC,SAAS,KAAK,UAAU,GAAG;AAEvD,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAEA,QAAM,SAAmB;AAAA,IACvB,MAAM,SAAS;AAAA,IACf,MAAM,SAAS;AAAA,IACf,WAAW,SAAS;AAAA,EACtB;AAEA,MAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAC7B;AAOA,IAAM,gBAAgB,CAAO,KAAc,QAA8B;AACvE,QAAM,SAAS,MAAM,GAAG,IAAI;AAE5B,QAAM,SAAqB;AAAA,IACzB,OAAO,OAAO;AAAA,IACd,MAAM,OAAO;AAAA,IACb,MAAM,OAAO;AAAA,EACf;AAEA,MAAI,OAAO,GAAG,EAAE,KAAK,MAAM;AAC7B;AAEA,IAAO,4BAAQ,EAAE,YAAY,aAAa,cAAc;;;ADpExD,IAAM,SAAS,OAAO;AAEtB,OAAO,MAAM,MAAM,EAAE,IAAI,0BAAiB,UAAU;AACpD,OAAO,MAAM,OAAO,EAAE,IAAI,0BAAiB,WAAW;AACtD,OAAO,MAAM,SAAS,EAAE,IAAI,0BAAiB,aAAa;AAE1D,IAAO,wBAAQ;;;ADNf,IAAM,MAAM,QAAQ;AACpB,IAAM,OAAO;AAEb,IAAI,IAAI,WAAW,qBAAY;AAE/B,IAAI,OAAO,MAAM,MAAM;AACrB,UAAQ,IAAI,gCAAgC,MAAM;AACpD,CAAC;",
  "names": []
}
